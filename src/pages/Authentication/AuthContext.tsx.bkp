// context/AuthContext.tsx
import React, { createContext, useState, useEffect, ReactNode } from 'react';
import { User as SupabaseUser } from '@supabase/supabase-js';
import { User, AuthContextType } from '../../types/User';
import { supabase } from '../../db/SupabaseClient';
import toast from 'react-hot-toast';
import { clearAuthState, setAuthState } from '../../store/authSlice';
import { useDispatch } from 'react-redux';

// Create the AuthContext with default values
const AuthContext = createContext<AuthContextType | undefined>(undefined);

const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const dispatch = useDispatch(); // Access the Redux dispatch function

  useEffect(() => {
    const getUser = async () => {
      try {
        const { data, error } = await supabase.auth.getSession();

        if (error) {
          console.error('Error fetching session:', error.message);
          setUser(null); // Ensure user is set to null on error
          throw error;
        } 
        
        if (!data.session) {
          console.error('Session is null. User is not authenticated.');
          setUser(null); // Explicitly handle null session
          throw error;
        }
        console.log(data);
        
          setUser(mapSupabaseUserToLocalUser(data.session.user, null));
          dispatch(setAuthState({ user: data.session.user.id , session:null }));
        
      } catch (err) {
        console.error('Unexpected error fetching session:', err);
        dispatch(setAuthState({ user: null, session:null }));
        setUser(null); // Set user to null if an exception occurs
      } finally {
        setLoading(false);
        
      }
    };

    getUser();
    

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, session) => {
      if (session) {
        setUser(mapSupabaseUserToLocalUser(session.user, null));
      } else {
        console.error('Session is null during onAuthStateChange.');
        setUser(null);
      }
    });

    return () => subscription.unsubscribe();
  }, []);

  const signIn = async (
    email: string,
    password: string,
    nrp: string | null,
  ) => {

    // Sign in to supabase authentication
    const { error, data } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    if (error) {
      toast.error(error.message);
      throw error;
    }

    const session = data.session;
    if (session) {
      dispatch(setAuthState({ user: data.user, session : session }));
    }

    // Get user role upon successful login
    const { error: positionerror, data: positiondata } = await supabase
      .from('manpower')
      .select(`position, incumbent(incumbent)`)
      .eq('nrp', nrp);
    if (positionerror) {
      toast.error(positionerror.message);
      throw positionerror;
    }

    const inc = positiondata[0].incumbent.incumbent;

    console.log(inc);

    setUser(mapSupabaseUserToLocalUser(data.user, inc));
  };

  const signOut = async () => {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;

    dispatch(clearAuthState()); // Clear Redux state
    setUser(null);
  };

  const mapSupabaseUserToLocalUser = (
    supabaseUser: SupabaseUser | null,
    role: string | null,
  ): User | null => {
    if (!supabaseUser) return null;
    return {
      id: supabaseUser.id,
      email: supabaseUser.email ?? null, // Adjust to match your local User type
      role: role ?? null,
    };
  };

  return (
    <AuthContext.Provider value={{ user, loading, signIn, signOut }}>
      {children}
    </AuthContext.Provider>
  );
};

export { AuthContext, AuthProvider };
