import React, { useState, useEffect } from 'react';
import DatePickerOne from '../../../../components/Forms/DatePicker/DatePickerOne';
import { formatDateToString } from '../../../../Utils/DateUtility';
import { supabase } from '../../../../db/SupabaseClient';
import RitationAction from '../components/RitationAction';
import toast, { Toaster } from 'react-hot-toast';
import { getRotatedImageData, uploadRotatedImage } from './RotateImage';

const Ritation = () => {
  const [date, setDate] = useState<Date | null>(new Date());
  const [dataRitasi, setDataRitasi] = useState<RitasiFuelData[]>([]);
  const [expandedRow, setExpandedRow] = useState<string | null>(null); // Handle expanded rows
  const [selectedImage, setSelectedImage] = useState<string | null>(null); // Modal state
  const [rotation, setRotation] = useState<number>(0); // Image rotation state

  const fetchRitationReport = async () => {
    const { data, error } = await supabase
      .from('ritasi_fuel')
      .select(
        `
        *,
        fuelman:manpower!ritasi_fuel_fuelman_id_fkey(nrp, nama),
        operator:manpower!ritasi_fuel_operator_id_fkey(nrp, nama),
        unit:storage!ritasi_fuel_warehouse_id_fkey(warehouse_id, unit_id)
      `,
      )
      .eq('ritation_date', formatDateToString(date!))
      .order('no_surat_jalan');

    if (error) {
      console.log(error);
      return;
    }

    // Enrich data with fuelman and operator names
    const enrichedData = data.map((item: any) => ({
      ...item,
      fuelman_name: item.fuelman?.nama || 'Unknown',
      operator_name: item.operator?.nama || 'Unknown',
      unit: item.unit?.unit_id || 'Unknown',
    }));

    setDataRitasi(enrichedData as RitasiFuelData[]);
    console.log(enrichedData);
  };

  useEffect(() => {
    fetchRitationReport();
  }, [date]);

  const handleDateChange = async (date: Date | null) => {
    setDate(date);
  };

  const handleApprove = async (id: string) => {
    const targetRow = dataRitasi.find((row) => row.no_surat_jalan === id);

    if (!targetRow) {
      console.error('Row not found');
      return;
    }

    const newValidationState = !targetRow.isValidated;

    const { error } = await supabase
      .from('ritasi_fuel')
      .update({ isValidated: newValidationState })
      .eq('no_surat_jalan', id);

    if (error) {
      console.error('Error updating validation state:', error);
      return;
    }
    toast.success('Approved');
    setDataRitasi((prevRows) =>
      prevRows.map((row) =>
        row.no_surat_jalan === id
          ? { ...row, isValidated: !row.isValidated }
          : row,
      ),
    );
  };

  const toggleEvidencePanel = (id: string) => {
    setExpandedRow(expandedRow === id ? null : id);
  };

  const handleImageClick = (url: string) => {
    setSelectedImage(url); // Open modal with image
    setRotation(0); // Reset rotation state
  };

  const closeModal = () => {
    setSelectedImage(null); // Close modal
  };

  const handleKeyDown = (event: KeyboardEvent) => {
    if (event.key === 'Escape') {
      closeModal();
    }
  };

  const handleModalClick = (event: React.MouseEvent<HTMLDivElement>) => {
    if (event.target === event.currentTarget) {
      closeModal();
    }
  };

  const rotateLeft = async () => {
    setRotation((prevRotation) => prevRotation - 90);
    const rotatedImageData = await getRotatedImageData(selectedImage, rotation - 90);
  await uploadRotatedImage(rotatedImageData);
  };

  const rotateRight = async () => {
    setRotation((prevRotation) => prevRotation + 90);
    const rotatedImageData = await getRotatedImageData(selectedImage, rotation + 90);
    await uploadRotatedImage(rotatedImageData);
  };

  useEffect(() => {
    if (selectedImage) {
      window.addEventListener('keydown', handleKeyDown);
    } else {
      window.removeEventListener('keydown', handleKeyDown);
    }

    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [selectedImage]);

  return (
    <>
      <div className="rounded-sm border border-stroke bg-white shadow-default dark:border-strokedark dark:bg-boxdark mb-6">
        <div className="flex flex-wrap items-center">
          <div className="w-full border-stroke dark:border-strokedark xl:border-l-2">
            <div className="w-full p-4 sm:p-12.5 xl:p-5">
              <div className="header block sm:flex">
                <h2 className="mb-2 font-bold text-black dark:text-white sm:text-title-sm w-full">
                  Ritation Dashboard
                </h2>
                <Toaster />
                <DatePickerOne
                  enabled={true}
                  handleChange={handleDateChange}
                  setValue={date ? formatDateToString(new Date(date)) : ''}
                />
              </div>

              <div className="ritation__table w-full">
                <div className="flex flex-col">
                  <div className="overflow-x-auto sm:-mx-6 lg:-mx-8">
                    <div className="inline-block min-w-full py-2 sm:px-6 lg:px-8">
                      <div className="overflow-hidden">
                        <table className="min-w-full text-left text-sm font-light text-surface dark:text-white">
                          <thead className="border-b border-neutral-200 font-medium dark:border-white/10">
                            <tr>
                              <th scope="col" className="px-6 py-4">
                                #
                              </th>
                              <th scope="col" className="px-6 py-4">
                                DO Number
                              </th>
                              <th scope="col" className="px-6 py-4">
                                Operator
                              </th>
                              <th scope="col" className="px-6 py-4">
                                Fuelman
                              </th>
                              <th scope="col" className="px-2 py-4">
                                FT Number
                              </th>
                              <th scope="col" className="px-6 py-4">
                                Before
                              </th>
                              <th scope="col" className="px-6 py-4">
                                After
                              </th>
                              <th scope="col" className="px-6 py-4">
                                Qty
                              </th>
                              <th scope="col" className="px-6 py-4">
                                Evidence
                              </th>
                              <th scope="col" className="px-6 py-4">
                                Action
                              </th>
                            </tr>
                          </thead>
                          <tbody>
                            {dataRitasi.map((row, index) => (
                              <React.Fragment key={index}>
                                <tr
                                  className={`border-b border-neutral-200 transition duration-500 ease-in-out dark:border-white/10 ${
                                    row.isValidated
                                      ? 'bg-green-50 dark:bg-green-900'
                                      : 'hover:bg-neutral-100 dark:hover:bg-neutral-600'
                                  }`}
                                >
                                  <td className="whitespace-nowrap px-6 py-4 font-medium">
                                    {index + 1}
                                  </td>
                                  <td className="whitespace-nowrap px-6 py-4 font-medium">
                                    {row.no_surat_jalan}
                                  </td>
                                  <td className="whitespace-nowrap px-6 py-4">
                                    {row.operator_name
                                      .split(' ')
                                      .map((name, index) => (
                                        <div key={index}>{name}</div> // Use <div> to create a new line for each part of the name
                                      ))}
                                  </td>
                                  <td className="whitespace-nowrap px-6 py-4">
                                    {row.fuelman_name
                                      .split(' ')
                                      .map((name, index) => (
                                        <div key={index}>{name}</div> // Same for fuelman_name
                                      ))}
                                  </td>

                                  <td className="whitespace-nowrap px-2 py-4">
                                    {row.unit}<br />({row.warehouse_id})
                                  </td>
                                  <td className="whitespace-nowrap px-6 py-4">
                                    {row.qty_flowmeter_before}
                                  </td>
                                  <td className="whitespace-nowrap px-6 py-4">
                                    {row.qty_flowmeter_after}
                                  </td>
                                  <td className="whitespace-nowrap px-6 py-4">
                                    {row.qty_sj}
                                  </td>
                                  <td className="whitespace-nowrap px-6 py-4">
                                    <button
                                      onClick={() =>
                                        toggleEvidencePanel(row.no_surat_jalan)
                                      }
                                      className="text-blue-500 hover:underline"
                                    >
                                      {expandedRow === row.no_surat_jalan
                                        ? 'Hide'
                                        : 'View'}
                                    </button>
                                  </td>
                                  <td className="whitespace-nowrap px-6 py-4">
                                    <RitationAction
                                      onApprove={() =>
                                        handleApprove(row.no_surat_jalan)
                                      }
                                    />
                                  </td>
                                </tr>
                                {/* Toggle evidence panel */}
                                {expandedRow === row.no_surat_jalan && (
                                  <tr>
                                    <td colSpan={9} className="px-6 py-4">
                                      <div className="overflow-hidden transition-max-height duration-500 ease-in-out max-h-[600px] bg-gray-100 dark:bg-gray-800 p-4 rounded">
                                        <div className="flex justify-center space-x-4">
                                          {/* Image Containers */}
                                          <div
                                            className="w-32 h-32 bg-gray-200 dark:bg-gray-700 rounded overflow-hidden cursor-pointer"
                                            onClick={() =>
                                              handleImageClick(
                                                row.flowmeter_before_url,
                                              )
                                            }
                                          >
                                            <img
                                              src={row.flowmeter_before_url}
                                              alt="Flowmeter Before"
                                              className="object-cover w-full h-full"
                                            />
                                          </div>
                                          <div
                                            className="w-32 h-32 bg-gray-200 dark:bg-gray-700 rounded overflow-hidden cursor-pointer"
                                            onClick={() =>
                                              handleImageClick(
                                                row.flowmeter_after_url,
                                              )
                                            }
                                          >
                                            <img
                                              src={row.flowmeter_after_url}
                                              alt="Flowmeter After"
                                              className="object-cover w-full h-full"
                                            />
                                          </div>
                                          <div
                                            className="w-32 h-32 bg-gray-200 dark:bg-gray-700 rounded overflow-hidden cursor-pointer"
                                            onClick={() =>
                                              handleImageClick(row.sj_url)
                                            }
                                          >
                                            <img
                                              src={row.sj_url}
                                              alt="Surat Jalan"
                                              className="object-cover w-full h-full"
                                            />
                                          </div>
                                        </div>
                                      </div>
                                    </td>
                                  </tr>
                                )}
                              </React.Fragment>
                            ))}
                          </tbody>
                        </table>

                        {/* Modal */}
                        {selectedImage && (
                          <div
                            className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50"
                            onClick={handleModalClick}
                          >
                            <div className="relative max-w-3xl">
                              <img
                                src={selectedImage}
                                alt="Selected"
                                className="max-w-full max-h-screen"
                                style={{ transform: `rotate(${rotation}deg)` }}
                              />
                              <div className="absolute bottom-0 flex justify-center mt-4 space-x-4 z-99">
                                <button
                                  className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
                                  onClick={rotateLeft}
                                >
                                  Rotate Left
                                </button>
                                <button
                                  className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
                                  onClick={rotateRight}
                                >
                                  Rotate Right
                                </button>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Ritation;
