import { supabase } from "../db/SupabaseClient";
import imageCompression from "browser-image-compression";

const supabaseStorageName = 'ritation_upload';

export const uploadImage = async (
  file: File,
  fileTitle: string,
  folderName: string,
  onProgress: (progress: number) => void // Add onProgress callback
): Promise<{ imageUrl: string | null, error: string | null }> => {
  let imageUrl: string | null = null;
  let error: string | null = null;

  if (!file) {
    return { imageUrl, error: "No file selected." };
  }

  let fileToUpload = file;

  // Check if the file size is above 100KB (100 * 1024 bytes)
  if (file.size > 100 * 1024) {
    // Compress the image if it's larger than 100KB
    const options = {
      maxSizeMB: 0.15, // Max size in MB (150KB)
      maxWidthOrHeight: 800, // Max width or height for resizing
      useWebWorker: true, // Use web worker for better performance
    };

    try {
      fileToUpload = await imageCompression(file, options);

      // Check if the compressed file is still over the size limit
      if (fileToUpload.size > 150 * 1024) {
        return { imageUrl, error: "Compressed file size exceeds 150KB limit." };
      }
    } catch (err) {
      console.error("Image compression failed:", err);
      return { imageUrl, error: "Image compression failed." };
    }
  }

  // Use the provided folder name and file title to create the full file path
  const fileName = `${new Date().getFullYear()}/${folderName}/${fileTitle}`;

  // Create a new AbortController to manage the upload
  const controller = new AbortController();
  const { signal } = controller;

  try {
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from(supabaseStorageName)
      .upload(fileName, fileToUpload, {
        signal,
      });

    if (uploadError) {
      return { imageUrl, error: `Upload failed: ${uploadError.message}` };
    }

    // Get the public URL of the uploaded image
    const { data } = supabase.storage
      .from(supabaseStorageName)
      .getPublicUrl(fileName);

    if (!data.publicUrl) {
      return { imageUrl, error: "Failed to get public URL." };
    }

    imageUrl = data.publicUrl; // Return the public URL of the uploaded image
    return { imageUrl, error };
  } catch (err) {
    if (err.name === 'AbortError') {
      return { imageUrl, error: "Upload canceled." };
    }
    return { imageUrl, error: `Upload failed: ${err.message}` };
  } finally {
    controller.abort(); // Clean up the controller
  }
};
